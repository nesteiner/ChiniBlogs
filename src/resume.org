#+title: 简历

* 个人信息

|      学号 | 姓名   | 年纪 | 专业   | 意向职位 |
|-----------+--------+------+--------+----------|
| 199050308 | 陈吉昊 |   20 | 计算机 | Vue前端    |



* 个人能力
** 编辑器
Emacs，我用了两年了，配置自己慢慢调
如果编辑的是 *Java* 或 *Android* 这种大项目的话，得用 *IDEA* 了
另外我希望这个软件能从零开始，重新构建一遍，扩展能力虽然很强，但要自己调试个半天，
*Emacs Lisp* 的运行效率也是一个难题，什么时候能把中文文档写好啊！！ 虽然有李杀写的文档
但他为什么不写个中文版的，偏偏写英文，比了狗了
*RMS* 什么时候能用 *Scheme* 重新写一遍呐 !!
** 操作系统
Ubuntu 挺熟悉的，我弄坏过好几次了
千万别用 *aptitude* 这个软件安装，一个不小心 *apt* 就没了，整个桌面系统 *ubuntu-desktop* 也可能没掉
到时候打开屏幕，你就会发现，他娘的不管你怎么输入密码，全都不给你通过
于是你又重启电脑，发现开始界面是一个 *bash*

另外要装一些比较新的软件可能会碰到依赖地狱，想要装这个软件，但是他依赖的库与系统里的库版本不兼容，
于是想尽办法装上去，这个系统被弄坏了
还是从源代码编译吧，如果用静态依赖 *Build* 就更好了，不会与系统起冲突

** 云平台
没钱买，又没有那个需求，买了也不知道干嘛
只好逛逛天池平台，或者各个云平台的教课，你会发现对着 *PPT* 讲课有什么难的，还不如自己去实践
** 编程语言
*** 接触过的有
1. 前端的
   - Vue
     其实 *html* 的一些东西我都不会，我习惯从零构建一个组件，然后用标签贴上去
2. 后端的
   - Python
   - C/C++
   - Rust
   - Clojure
3. 关于数据分析的
   - Julia
4. 随便写写的
   - Scheme
   - Emacs Lisp
5. 数据库
   - MySQL
   - MongoDB
*** 以后打算把这几个作为主要编程语言
1. Python
2. Vue with Typescript

现在是工作需要，效率第一，其他的慢慢学吧

** 编程工具
我没怎么用过这些编程工具，调试的需要，版本控制的需要很少
好像大项目，或者跟别人合作才需要用到版本控制，一个小项目用 *Git* 也学不到什么东西

调试是为了验证程序正确，比如在多线程调试，还有算法调试，还有不知道发生了什么的错误（说的就是C/C++）
但是，如果你用了函数式的编程风格，并发安全的语言，静态语言，在编译的时候就把可能发生的错误纠正，也就不需要打那么多的断点了
有这样两句话
1. 深夜了， *Golang* 程序员早已下班， *C/C++* 程序员还在打断点， *Rust* 程序员还在编译
2. 动态类型一时爽，代码重构火葬场

*** 版本管理
Git
*** 调试
GDB, PDB

** 论坛
这些都是跟别的编程爱好者交流的平台，跟他们交流过后才知道自己太弱了
另外发现也不是一定要学英文，就算写得再怎么别扭，他们也还是能看懂
还好没在编程论坛里发现 *政治正确*
1. Emacs China
2. Julia China
3. Slack
4. Discord

* 既往经验
** 项目1 美女爬虫
*** 项目地址
[[https://gitee.com/nesteiner/cake][gitee]]
*** 介绍
这个项目其实已经不能用了，因为目标网站好像上不去了
其实爬取美女图片的流程都差不多，最重要的是翻页爬取网页，在前一个网页爬取到后一个网页的地址，接着
继续爬取
次要的就是如何处理请求错误了，爬得太快容易被封，这个时候需要设置 *请求中间件* 或者设置间隔时间
更高级的可以使用 *redis* 设置 *IP代理池* 和 *Cookie* 池，太累了，没有继续学下去

** 项目2 Web课程大作业 todolist
*** 项目地址
[[https://gitee.com/nesteiner/todolist][gitee]]
*** 介绍
第一个学期的Web作业我用 *Vue* 做的，从10月份开始敲 *Vue* 代码，不断地实践，学得越来越快，
顺带把以前 *html* 和 *css* 的一些难点弄懂了，本来还有一些文档没有整理，不过我也懒得去写
下一步是学习 *scss* 和 *typescript with Vue* ，不过前几天发现 [[https://github.com/kaorun343/vue-property-decorator][vue-property-decorator]] 这个库
还不能正式支持 *Vue3* 版本，我只好先用 *tag* 为 /v10.0.0-rc.3/ 的分支了

** 项目3 欧拉计划
*** 项目地址
[[https://gitee.com/nesteiner/euler-project][gitee]]
*** 介绍
这个好像是去年写的，放了好久了
那个时候想找个项目实践下我的编程能力， *LeetCode* 里全他妈算法题， *CodeWars* 那个时候不会科学上网，上去太慢，
发现有欧拉计划的中文翻译网站，就开始实践了
我好像用不同的语言写过这些题，有些题目没有校对过，题目有一些我拿去跟 *Julia* 论坛的人分享过
https://discourse.juliacn.com/t/topic/3192
https://discourse.juliacn.com/t/topic/3226
https://discourse.juliacn.com/t/topic/3258
最后因为自己的数学能力实在不行，就停在 21 - 30 题了
碰到不会的题目的时候，学会了去用 *Slack* 去跟别人讨论，丫的都是英文，还好喷到个新加坡的，会点中文
** 项目4 Julia MLJ 机器学习框架的笔记
*** 项目地址
[[https://github.com/noob-data-analaysis/data-analysis][github]]
*** 介绍
这个还是去年做的
https://zhuanlan.zhihu.com/p/352732686
这玩样查文档累死我了，全尼玛是英文，机翻看得也难懂
https://alan-turing-institute.github.io/MLJ.jl/dev/
还好，花了三个月，单独啃完了一大部分内容，实践的时候顺带去 *Slack* 的 *#MLJ* 频道去问问作者，虽然
我的问题都很弱智，没抽我就已经很好了

顺带说一下，这个项目是跟极客时间的一个专栏同时学的
https://time.geekbang.org/column/article/73248
里面使用的语言是 *Python* ，看了看语法，我果断选择用 *Julia* 作实践，就是这个鳖孙第一次跑很慢，需要
往内存里加载一堆东西，得用预编译或者多核CPU加速，目前还没有很好的 IDE 支持，除了 *Jupyter Notebook* ，好用是好用，
就是不支持 *Emacs* 按键，还有就是 *ShowTables* 这个第三方库在里面用不了，好像是另一个第三方库 *WebIO* 的问题，在
*notebook* 里渲染表格的时候经常失败
** 文档整理
*** Vue.js
https://segmentfault.com/u/nesteiner/articles
这是我放在 *SegmentFault* 的文章，这个网站的编辑器挺好用的，隔壁的知乎编辑器实在垃圾
好久都没去写笔记了，主要是懒
*** MLJ
https://zhuanlan.zhihu.com/p/352732686
*** 杂项
这两个是学爬虫的时候写的，关于 *Selenium* 测试框架的一些使用，不是很深奥
https://zhuanlan.zhihu.com/p/272177213
https://zhuanlan.zhihu.com/p/272036640
** 未上传的
*** Socket 套接字编程实战
这个在我的 *Github* 主页里好像有，好像是以前的，一些太久没更新的仓库我都删掉了
这个项目是参照极客时间的一个专栏实践的
https://time.geekbang.org/column/article/111267
我也忘了他在我哪个文件夹里了
这个项目我记得学到了用 *Epoll* 作一个 *Reactor* 模型，然后我就忘了为什么取消执行这个项目

哎呀卧槽，找到了，我传一下
*** Flask + Vue 前后端分离项目
这个是为了 *JSP* 的大作业创建的，今天问了下老师，前端可以不写 *JSP* 代码，后端接口用 *Servlet* 就行了
卧槽 ！！
这个项目是参照 *Flask* 的一个入门教程修改的
https://github.com/greyli/watchlist
这个项目的前端用的是 *Jinjia* 模板语法，后端用的是 *Flask*
我把它改成前端用 *Vue* ，后端用 *Flask* ，后端的功能只有对数据库的增删改查，还有处理 *COR* 这个跨域访问的错误
还好，我还写了一个 *Servlet* 后端，这个学期的大作业就算是做好了吧，就差写文档了
*** scrapy 中间件的使用
这些笔记没有写完是因为爬虫项目还没有完善，也有可能是太忙了，忘掉了
有些内容还没有进行检验，不好发布，这是检验用的 *PlayGround*
http://exercise.kingname.info/
