#+title: 学校作业记录
#+options: toc:nil section-number:nil
* School Work Record
** 数据结构实践作业
[[file:practise][goto project]]
*** DONE 问题1
对中等规模、大规模的图书摆放，你有什么更好的建议？
以书名作为索引，使用二叉平衡树进行存储，比如红黑树
使用平衡树存储
- 插入的时间复杂度为 =O(logN)=
- 删除的时间复杂度为 =O(logN)=
- 查找的时间复杂度为 =O(logN)=

*** TODO 问题2
用几种算法实现上面的题目，计算每种算法的基本操作的执行次数，分析该算法的时间复杂度，说明算法与时间复杂度的关系。

*** DONE 问题3
完成选择法排序算法设计与实现，并分析算法最好情况、最差情况和平均情况的时间复杂度。
- 最好情况下，时间复杂度为 =O(n)=
- 最差情况下，时间复杂度为 =O(n^2)=
- 平均情况下，时间复杂度为 =O(n^2)=

#+begin_src c++
  void swap(int & a, int & b) {
    if(a != b) {
      a ^= b;
      b ^= a;
      a ^= b;
    }
  }

  int findmin(vector<int> & nums, int start, int end) {
    int _min = start;
    for(int index = start + 1; index <= end; index += 1) {
      if(nums[_min] > nums[index]) {
        _min = index;
      } else {
        continue;
      }
    }

    return _min;
  }



  int firstindex(vector<int> & nums) {
    return 0;
  }

  int lastindex(vector<int> & nums) {
    return nums.size() - 1;
  }

  void select_sort(vector<int> & nums) {
    int start = firstindex(nums);
    int end = lastindex(nums);

    for(int index = start; index <= end; index += 1) {
      int _min = findmin(nums, index, end);
      swap(nums[index], nums[_min]);
    }
  }

  int main()
  {
    vector<int> nums = {3, 38, 44, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48};
    select_sort(nums);

    for(int & data: nums) {
      cout << data << ' ';
    }

    cout << endl;
    return 0;
  }

#+end_src

*** DONE 问题5
对于一维数组 =A[0..n-1] (n>1)= ，设计在时间和空间方面尽可量有效率的算法，
将A中的序列循环左移 =p(0<p<n)= 个位置，
即将 =A= 中的数据从 =(A0, A1, ......, An-1)=
转变成 =(Ap,Ap+1,......,An-1,A0,A1,......,Ap-1=
要求用几种算法（尽可能多）实现上述题目。并分析每种算法的时间和空间复杂度。
- 时间复杂度为 =O(n)=
- 空间复杂度为 =O(n)=

#+begin_src c++
  vector<int> shiftleft(vector<int> &nums, int p) {
    int n = nums.size() - 1;
    assert(p > 0 && p < n);

    vector<int> result;
    for (int index = p; index <= n - 1; index += 1) {
      result.push_back(nums[index]);
    }

    for (int index = 0; index <= p - 1; index += 1) {
      result.push_back(nums[index]);
    }

    return result;
  }

#+end_src

